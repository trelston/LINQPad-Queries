// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.ResourceAccess.Model
{

    // SalesTaxRate
    ///<summary>
    /// Tax rate lookup table.
    ///</summary>
    [Table("SalesTaxRate", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_SalesTaxRate
    {

        ///<summary>
        /// Primary key for SalesTaxRate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"SalesTaxRateID", Order = 1, TypeName = "int")]
        [Index(@"PK_SalesTaxRate_SalesTaxRateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Sales tax rate ID")]
        public int SalesTaxRateId { get; set; } // SalesTaxRateID (Primary key)

        ///<summary>
        /// State, province, or country/region the sales tax applies to.
        ///</summary>
        [Column(@"StateProvinceID", Order = 2, TypeName = "int")]
        [Index(@"AK_SalesTaxRate_StateProvinceID_TaxType", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "State province ID")]
        public int StateProvinceId { get; set; } // StateProvinceID

        ///<summary>
        /// 1 = Tax applied to retail transactions, 2 = Tax applied to wholesale transactions, 3 = Tax applied to all sales (retail and wholesale) transactions.
        ///</summary>
        [Column(@"TaxType", Order = 3, TypeName = "tinyint")]
        [Index(@"AK_SalesTaxRate_StateProvinceID_TaxType", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Tax type")]
        public byte TaxType { get; set; } // TaxType

        ///<summary>
        /// Tax rate amount.
        ///</summary>
        [Column(@"TaxRate", Order = 4, TypeName = "smallmoney")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Tax rate")]
        public decimal TaxRate { get; set; } // TaxRate

        ///<summary>
        /// Tax rate description.
        ///</summary>
        [Column(@"Name", Order = 5, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Name")]
        public string Name { get; set; } // Name (length: 50)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Index(@"AK_SalesTaxRate_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_StateProvince pointed by [SalesTaxRate].([StateProvinceId]) (FK_SalesTaxRate_StateProvince_StateProvinceID)
        /// </summary>
        [ForeignKey("StateProvinceId"), Required] public virtual Person_StateProvince Person_StateProvince { get; set; } // FK_SalesTaxRate_StateProvince_StateProvinceID

        public Sales_SalesTaxRate()
        {
            TaxRate = 0.00m;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
        }
    }

}
// </auto-generated>
