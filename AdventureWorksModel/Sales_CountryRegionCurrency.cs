// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.ResourceAccess.Model
{

    // CountryRegionCurrency
    ///<summary>
    /// Cross-reference table mapping ISO currency codes to a country or region.
    ///</summary>
    [Table("CountryRegionCurrency", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CountryRegionCurrency
    {

        ///<summary>
        /// ISO code for countries and regions. Foreign key to CountryRegion.CountryRegionCode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CountryRegionCode", Order = 1, TypeName = "nvarchar")]
        [Index(@"PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode", 1, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Country region code")]
        public string CountryRegionCode { get; set; } // CountryRegionCode (Primary key) (length: 3)

        ///<summary>
        /// ISO standard currency code. Foreign key to Currency.CurrencyCode.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"CurrencyCode", Order = 2, TypeName = "nchar")]
        [Index(@"IX_CountryRegionCurrency_CurrencyCode", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_CountryRegionCurrency_CountryRegionCode_CurrencyCode", 2, IsUnique = true, IsClustered = true)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Key]
        [Display(Name = "Currency code")]
        public string CurrencyCode { get; set; } // CurrencyCode (Primary key) (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 3, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Person_CountryRegion pointed by [CountryRegionCurrency].([CountryRegionCode]) (FK_CountryRegionCurrency_CountryRegion_CountryRegionCode)
        /// </summary>
        [ForeignKey("CountryRegionCode"), Required] public virtual Person_CountryRegion Person_CountryRegion { get; set; } // FK_CountryRegionCurrency_CountryRegion_CountryRegionCode

        /// <summary>
        /// Parent Sales_Currency pointed by [CountryRegionCurrency].([CurrencyCode]) (FK_CountryRegionCurrency_Currency_CurrencyCode)
        /// </summary>
        [ForeignKey("CurrencyCode"), Required] public virtual Sales_Currency Sales_Currency { get; set; } // FK_CountryRegionCurrency_Currency_CurrencyCode

        public Sales_CountryRegionCurrency()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

}
// </auto-generated>
