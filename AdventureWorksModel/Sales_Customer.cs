// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.ResourceAccess.Model
{

    // Customer
    ///<summary>
    /// Current customer information. Also see the Person and Store tables.
    ///</summary>
    [Table("Customer", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_Customer
    {

        ///<summary>
        /// Primary key.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CustomerID", Order = 1, TypeName = "int")]
        [Index(@"PK_Customer_CustomerID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Customer ID")]
        public int CustomerId { get; set; } // CustomerID (Primary key)

        ///<summary>
        /// Foreign key to Person.BusinessEntityID
        ///</summary>
        [Column(@"PersonID", Order = 2, TypeName = "int")]
        [Display(Name = "Person ID")]
        public int? PersonId { get; set; } // PersonID

        ///<summary>
        /// Foreign key to Store.BusinessEntityID
        ///</summary>
        [Column(@"StoreID", Order = 3, TypeName = "int")]
        [Display(Name = "Store ID")]
        public int? StoreId { get; set; } // StoreID

        ///<summary>
        /// ID of the territory in which the customer is located. Foreign key to SalesTerritory.SalesTerritoryID.
        ///</summary>
        [Column(@"TerritoryID", Order = 4, TypeName = "int")]
        [Index(@"IX_Customer_TerritoryID", 1, IsUnique = false, IsClustered = false)]
        [Display(Name = "Territory ID")]
        public int? TerritoryId { get; set; } // TerritoryID

        ///<summary>
        /// Unique number identifying the customer assigned by the accounting system.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"AccountNumber", Order = 5, TypeName = "varchar")]
        [Index(@"AK_Customer_AccountNumber", 1, IsUnique = true, IsClustered = false)]
        [MaxLength(10)]
        [StringLength(10)]
        [Display(Name = "Account number")]
        public string AccountNumber { get; private set; } // AccountNumber (length: 10)

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Used to support a merge replication sample.
        ///</summary>
        [Column(@"rowguid", Order = 6, TypeName = "uniqueidentifier")]
        [Index(@"AK_Customer_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CustomerID] point to this entity (FK_SalesOrderHeader_Customer_CustomerID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_Customer_CustomerID

        // Foreign keys

        /// <summary>
        /// Parent Person_Person pointed by [Customer].([PersonId]) (FK_Customer_Person_PersonID)
        /// </summary>
        [ForeignKey("PersonId")] public virtual Person_Person Person_Person { get; set; } // FK_Customer_Person_PersonID

        /// <summary>
        /// Parent Sales_Store pointed by [Customer].([StoreId]) (FK_Customer_Store_StoreID)
        /// </summary>
        [ForeignKey("StoreId")] public virtual Sales_Store Sales_Store { get; set; } // FK_Customer_Store_StoreID

        /// <summary>
        /// Parent Sales_SalesTerritory pointed by [Customer].([TerritoryId]) (FK_Customer_SalesTerritory_TerritoryID)
        /// </summary>
        [ForeignKey("TerritoryId")] public virtual Sales_SalesTerritory Sales_SalesTerritory { get; set; } // FK_Customer_SalesTerritory_TerritoryID

        public Sales_Customer()
        {
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

}
// </auto-generated>
