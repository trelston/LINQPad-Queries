// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.ResourceAccess.Model
{

    // Document
    ///<summary>
    /// Product maintenance documents.
    ///</summary>
    [Table("Document", Schema = "Production")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Production_Document
    {

        ///<summary>
        /// Primary key for Document records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"DocumentNode", Order = 1, TypeName = "hierarchyid")]
        [Index(@"PK_Document_DocumentNode", 1, IsUnique = true, IsClustered = true)]
        [Index(@"AK_Document_DocumentLevel_DocumentNode", 2, IsUnique = true, IsClustered = false)]
        [Required]
        [Key]
        [Display(Name = "Document node")]
        public System.Data.Entity.Hierarchy.HierarchyId DocumentNode { get; set; } // DocumentNode (Primary key)

        ///<summary>
        /// Depth in the document hierarchy.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Computed)]
        [Column(@"DocumentLevel", Order = 2, TypeName = "smallint")]
        [Index(@"AK_Document_DocumentLevel_DocumentNode", 1, IsUnique = true, IsClustered = false)]
        [Display(Name = "Document level")]
        public short? DocumentLevel { get; private set; } // DocumentLevel

        ///<summary>
        /// Title of the document.
        ///</summary>
        [Column(@"Title", Order = 3, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(50)]
        [StringLength(50)]
        [Display(Name = "Title")]
        public string Title { get; set; } // Title (length: 50)

        ///<summary>
        /// Employee who controls the document.  Foreign key to Employee.BusinessEntityID
        ///</summary>
        [Column(@"Owner", Order = 4, TypeName = "int")]
        [Required]
        [Display(Name = "Owner")]
        public int Owner { get; set; } // Owner

        ///<summary>
        /// 0 = This is a folder, 1 = This is a document.
        ///</summary>
        [Column(@"FolderFlag", Order = 5, TypeName = "bit")]
        [Required]
        [Display(Name = "Folder flag")]
        public bool FolderFlag { get; set; } // FolderFlag

        ///<summary>
        /// File name of the document
        ///</summary>
        [Column(@"FileName", Order = 6, TypeName = "nvarchar")]
        [Index(@"IX_Document_FileName_Revision", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(400)]
        [StringLength(400)]
        [Display(Name = "File name")]
        public string FileName { get; set; } // FileName (length: 400)

        ///<summary>
        /// File extension indicating the document type. For example, .doc or .txt.
        ///</summary>
        [Column(@"FileExtension", Order = 7, TypeName = "nvarchar")]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(8)]
        [StringLength(8)]
        [Display(Name = "File extension")]
        public string FileExtension { get; set; } // FileExtension (length: 8)

        ///<summary>
        /// Revision number of the document.
        ///</summary>
        [Column(@"Revision", Order = 8, TypeName = "nchar")]
        [Index(@"IX_Document_FileName_Revision", 2, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(5)]
        [StringLength(5)]
        [Display(Name = "Revision")]
        public string Revision { get; set; } // Revision (length: 5)

        ///<summary>
        /// Engineering change approval number.
        ///</summary>
        [Column(@"ChangeNumber", Order = 9, TypeName = "int")]
        [Required]
        [Display(Name = "Change number")]
        public int ChangeNumber { get; set; } // ChangeNumber

        ///<summary>
        /// 1 = Pending approval, 2 = Approved, 3 = Obsolete
        ///</summary>
        [Column(@"Status", Order = 10, TypeName = "tinyint")]
        [Required]
        [Display(Name = "Status")]
        public byte Status { get; set; } // Status

        ///<summary>
        /// Document abstract.
        ///</summary>
        [Column(@"DocumentSummary", Order = 11, TypeName = "nvarchar(max)")]
        [Display(Name = "Document summary")]
        public string DocumentSummary { get; set; } // DocumentSummary

        ///<summary>
        /// Complete document.
        ///</summary>
        [Column(@"Document", Order = 12, TypeName = "varbinary(max)")]
        [Display(Name = "Document")]
        public byte[] Document { get; set; } // Document

        ///<summary>
        /// ROWGUIDCOL number uniquely identifying the record. Required for FileStream.
        ///</summary>
        [Column(@"rowguid", Order = 13, TypeName = "uniqueidentifier")]
        [Index(@"UQ__Document__F73921F7C5112C2E", 1, IsUnique = true, IsClustered = false)]
        [Index(@"AK_Document_rowguid", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [Display(Name = "Rowguid")]
        public System.Guid Rowguid { get; set; } // rowguid

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 14, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Production_ProductDocuments where [ProductDocument].[DocumentNode] point to this entity (FK_ProductDocument_Document_DocumentNode)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Production_ProductDocument> Production_ProductDocuments { get; set; } // ProductDocument.FK_ProductDocument_Document_DocumentNode

        // Foreign keys

        /// <summary>
        /// Parent HumanResources_Employee pointed by [Document].([Owner]) (FK_Document_Employee_Owner)
        /// </summary>
        [ForeignKey("Owner"), Required] public virtual HumanResources_Employee HumanResources_Employee { get; set; } // FK_Document_Employee_Owner

        public Production_Document()
        {
            FolderFlag = false;
            ChangeNumber = 0;
            Rowguid = System.Guid.NewGuid();
            ModifiedDate = System.DateTime.Now;
            Production_ProductDocuments = new System.Collections.Generic.List<Production_ProductDocument>();
        }
    }

}
// </auto-generated>
