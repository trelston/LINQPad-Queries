// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.ResourceAccess.Model
{

    // ProductVendor
    ///<summary>
    /// Cross-reference table mapping vendors with the products they supply.
    ///</summary>
    [Table("ProductVendor", Schema = "Purchasing")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Purchasing_ProductVendor
    {

        ///<summary>
        /// Primary key. Foreign key to Product.ProductID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"ProductID", Order = 1, TypeName = "int")]
        [Index(@"PK_ProductVendor_ProductID_BusinessEntityID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Product ID")]
        public int ProductId { get; set; } // ProductID (Primary key)

        ///<summary>
        /// Primary key. Foreign key to Vendor.BusinessEntityID.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.None)]
        [Column(@"BusinessEntityID", Order = 2, TypeName = "int")]
        [Index(@"IX_ProductVendor_BusinessEntityID", 1, IsUnique = false, IsClustered = false)]
        [Index(@"PK_ProductVendor_ProductID_BusinessEntityID", 2, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Business entity ID")]
        public int BusinessEntityId { get; set; } // BusinessEntityID (Primary key)

        ///<summary>
        /// The average span of time (in days) between placing an order with the vendor and receiving the purchased product.
        ///</summary>
        [Column(@"AverageLeadTime", Order = 3, TypeName = "int")]
        [Required]
        [Display(Name = "Average lead time")]
        public int AverageLeadTime { get; set; } // AverageLeadTime

        ///<summary>
        /// The vendor&apos;s usual selling price.
        ///</summary>
        [Column(@"StandardPrice", Order = 4, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Standard price")]
        public decimal StandardPrice { get; set; } // StandardPrice

        ///<summary>
        /// The selling price when last purchased.
        ///</summary>
        [Column(@"LastReceiptCost", Order = 5, TypeName = "money")]
        [DataType(DataType.Currency)]
        [Display(Name = "Last receipt cost")]
        public decimal? LastReceiptCost { get; set; } // LastReceiptCost

        ///<summary>
        /// Date the product was last received by the vendor.
        ///</summary>
        [Column(@"LastReceiptDate", Order = 6, TypeName = "datetime")]
        [DataType(DataType.DateTime)]
        [Display(Name = "Last receipt date")]
        public System.DateTime? LastReceiptDate { get; set; } // LastReceiptDate

        ///<summary>
        /// The maximum quantity that should be ordered.
        ///</summary>
        [Column(@"MinOrderQty", Order = 7, TypeName = "int")]
        [Required]
        [Display(Name = "Min order qty")]
        public int MinOrderQty { get; set; } // MinOrderQty

        ///<summary>
        /// The minimum quantity that should be ordered.
        ///</summary>
        [Column(@"MaxOrderQty", Order = 8, TypeName = "int")]
        [Required]
        [Display(Name = "Max order qty")]
        public int MaxOrderQty { get; set; } // MaxOrderQty

        ///<summary>
        /// The quantity currently on order.
        ///</summary>
        [Column(@"OnOrderQty", Order = 9, TypeName = "int")]
        [Display(Name = "On order qty")]
        public int? OnOrderQty { get; set; } // OnOrderQty

        ///<summary>
        /// The product&apos;s unit of measure.
        ///</summary>
        [Column(@"UnitMeasureCode", Order = 10, TypeName = "nchar")]
        [Index(@"IX_ProductVendor_UnitMeasureCode", 1, IsUnique = false, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "Unit measure code")]
        public string UnitMeasureCode { get; set; } // UnitMeasureCode (length: 3)

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 11, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Foreign keys

        /// <summary>
        /// Parent Purchasing_Vendor pointed by [ProductVendor].([BusinessEntityId]) (FK_ProductVendor_Vendor_BusinessEntityID)
        /// </summary>
        [ForeignKey("BusinessEntityId"), Required] public virtual Purchasing_Vendor Purchasing_Vendor { get; set; } // FK_ProductVendor_Vendor_BusinessEntityID

        /// <summary>
        /// Parent Production_Product pointed by [ProductVendor].([ProductId]) (FK_ProductVendor_Product_ProductID)
        /// </summary>
        [ForeignKey("ProductId"), Required] public virtual Production_Product Production_Product { get; set; } // FK_ProductVendor_Product_ProductID

        /// <summary>
        /// Parent Production_UnitMeasure pointed by [ProductVendor].([UnitMeasureCode]) (FK_ProductVendor_UnitMeasure_UnitMeasureCode)
        /// </summary>
        [ForeignKey("UnitMeasureCode"), Required] public virtual Production_UnitMeasure Production_UnitMeasure { get; set; } // FK_ProductVendor_UnitMeasure_UnitMeasureCode

        public Purchasing_ProductVendor()
        {
            ModifiedDate = System.DateTime.Now;
        }
    }

}
// </auto-generated>
