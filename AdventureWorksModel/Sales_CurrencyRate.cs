// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.7
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning

using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace AdventureWorks.ResourceAccess.Model
{

    // CurrencyRate
    ///<summary>
    /// Currency exchange rates.
    ///</summary>
    [Table("CurrencyRate", Schema = "Sales")]
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.4.0")]
    public class Sales_CurrencyRate
    {

        ///<summary>
        /// Primary key for CurrencyRate records.
        ///</summary>
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        [Column(@"CurrencyRateID", Order = 1, TypeName = "int")]
        [Index(@"PK_CurrencyRate_CurrencyRateID", 1, IsUnique = true, IsClustered = true)]
        [Required]
        [Key]
        [Display(Name = "Currency rate ID")]
        public int CurrencyRateId { get; set; } // CurrencyRateID (Primary key)

        ///<summary>
        /// Date and time the exchange rate was obtained.
        ///</summary>
        [Column(@"CurrencyRateDate", Order = 2, TypeName = "datetime")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 1, IsUnique = true, IsClustered = false)]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Currency rate date")]
        public System.DateTime CurrencyRateDate { get; set; } // CurrencyRateDate

        ///<summary>
        /// Exchange rate was converted from this currency code.
        ///</summary>
        [Column(@"FromCurrencyCode", Order = 3, TypeName = "nchar")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 2, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "From currency code")]
        public string FromCurrencyCode { get; set; } // FromCurrencyCode (length: 3)

        ///<summary>
        /// Exchange rate was converted to this currency code.
        ///</summary>
        [Column(@"ToCurrencyCode", Order = 4, TypeName = "nchar")]
        [Index(@"AK_CurrencyRate_CurrencyRateDate_FromCurrencyCode_ToCurrencyCode", 3, IsUnique = true, IsClustered = false)]
        [Required(AllowEmptyStrings = true)]
        [MaxLength(3)]
        [StringLength(3)]
        [Display(Name = "To currency code")]
        public string ToCurrencyCode { get; set; } // ToCurrencyCode (length: 3)

        ///<summary>
        /// Average exchange rate for the day.
        ///</summary>
        [Column(@"AverageRate", Order = 5, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "Average rate")]
        public decimal AverageRate { get; set; } // AverageRate

        ///<summary>
        /// Final exchange rate for the day.
        ///</summary>
        [Column(@"EndOfDayRate", Order = 6, TypeName = "money")]
        [Required]
        [DataType(DataType.Currency)]
        [Display(Name = "End of day rate")]
        public decimal EndOfDayRate { get; set; } // EndOfDayRate

        ///<summary>
        /// Date and time the record was last updated.
        ///</summary>
        [Column(@"ModifiedDate", Order = 7, TypeName = "datetime")]
        [Required]
        [DataType(DataType.DateTime)]
        [Display(Name = "Modified date")]
        public System.DateTime ModifiedDate { get; set; } // ModifiedDate

        // Reverse navigation

        /// <summary>
        /// Child Sales_SalesOrderHeaders where [SalesOrderHeader].[CurrencyRateID] point to this entity (FK_SalesOrderHeader_CurrencyRate_CurrencyRateID)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<Sales_SalesOrderHeader> Sales_SalesOrderHeaders { get; set; } // SalesOrderHeader.FK_SalesOrderHeader_CurrencyRate_CurrencyRateID

        // Foreign keys

        /// <summary>
        /// Parent Sales_Currency pointed by [CurrencyRate].([FromCurrencyCode]) (FK_CurrencyRate_Currency_FromCurrencyCode)
        /// </summary>
        [ForeignKey("FromCurrencyCode"), Required] public virtual Sales_Currency Sales_Currency_FromCurrencyCode { get; set; } // FK_CurrencyRate_Currency_FromCurrencyCode

        /// <summary>
        /// Parent Sales_Currency pointed by [CurrencyRate].([ToCurrencyCode]) (FK_CurrencyRate_Currency_ToCurrencyCode)
        /// </summary>
        [ForeignKey("ToCurrencyCode"), Required] public virtual Sales_Currency Sales_Currency_ToCurrencyCode { get; set; } // FK_CurrencyRate_Currency_ToCurrencyCode

        public Sales_CurrencyRate()
        {
            ModifiedDate = System.DateTime.Now;
            Sales_SalesOrderHeaders = new System.Collections.Generic.List<Sales_SalesOrderHeader>();
        }
    }

}
// </auto-generated>
